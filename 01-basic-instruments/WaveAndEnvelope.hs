{- | Variable waveform and envelope
The basic instrument to synthesize pitched sounds consists of a
periodic waveform and an amplitude envelope. In SWSS this is
realized in the most general way by two oscillators: the envelope
is generated by setting one oscillator's frequency to 1/idur.
This way the oscillator will simply scan a given function table
once per note, independent of the note duration.  The periodic
waveform is generated according to the GEN function table which
has been assigned to the second oscillator.  GEN 10 is utilized
for complex waves with equal strength harmonics.  GEN 09 serves
to generate complex wavetables, where strengths and ratios of the
individual components are free. GEN 05 or 07 generate exponential
and linear function tables containing discontinuities. These
functions are also successful in serving as waveforms, but
foldover may lead to unwanted quantities of noise in the output.

The instrument demonstrates a number of different waveforms:
complex waves with between one and eleven harmonics, complex
waves with weighted partials, and a number of linear waveforms
(foldover components are negligible at this frequency). The
linear waveforms are followed by a number of linear and
exponential envelopes.  During this display, the wave is held
constant: linear waveform f42. 

In the f statements that generate the exponential tables, a
maximum value of 10000 had at first lead to a value of .0001 at
the extremes of the table (after rescaling). This very low value
of .0001 resulted in noisy cutoffs. A max value of 1024 (2**10)
is better. See also discussion of values for iatdec, instruments
01_01_2B and 01_01_5.

Some linear time functions and a few wave spectra are shown in
the function tables.
-}

module Main where


import Csound.Base

-- instrument

envOsc :: (Iamp, Icps, Tab, Tab) -> Sig
envOsc (amp, cps, oscTab, envTab) = once envTab * oscili (kr amp) (kr cps) oscTab

-- tables

-- sine waveforms
f1 = sines [1]                                          -- fundamental
f2 = sines [1, 0.2, 0.05]                               -- three harmonics
f3 = sines [1, 0.2, 0.08, 0.07]                         -- four harmonics
f4 = sines [1, 0.4, 0.2, 0.1, 0.1, 0.05]                -- six harmonics
f5 = sines [1, 0.5, 0.3, 0.2, 0.15, 0.12]               -- six harmonics
f6 = sines [1, 1, 1, 0.3, 0.3, 0.3, 1, 1, 1, 1]         -- ten harmonics
f7 = sines [1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]            -- eleven harmonics
f8 = sines [1, 2, 3, 5, 8, 13, 1, 2, 3, 5, 8, 13]       -- fibonacci twice
f9 = sines [0.8, 1.2, 1.2, 0.8, 
            0.8, 1.2, 1.3, 0.8, 0.1, 0.3, 0]            -- ca. alternating

f10 = sines3 [(1, 1, phase) | phase <- [0, 0.05]]       -- phase diff
f11 = sines3 [(n, 1, 0) | n <- [10 .. 19]]              -- start at 10th

-- linear waveforms
f41 = segs [0, 1, 1, 2, 1, 2, -1, 2, -1, 1, 0]          -- 50% pulse(square)
f42 = segs [0, 1, 1, 100, 1, 2, -1, 100, -1, 2, 0]      -- steeper square
f43 = segs [0, 6, 1, 200, 1, 12, -1, 800, -1, 6, 0]     -- 20% pulse
f44 = segs [0, 6, 1, 100, 1, 12, -1, 900, -1, 6, 0]     -- 10% pulse
f45 = segs [0, 500, 1, 24, -1, 500, 0]                  -- sawtooth
f46 = esegs [0, 1, 0, -1, 0]                            -- triangle

-- linear envelopes
f32 = segs [0, 12, 0.99, 500, 0]
f33 = segs [0, 1, 0, 49, 0.2, 90, 0.6, 40, 0.99, 25, 0.9, 
            45, 0.5, 50, 0.25, 50, 0.12, 50, 0.06, 50, 0.02, 62, 0]
    
f34 = segs [0, 1, 0, 49, 0.2, 100, 0.6, 50, 0.99, 150, 0.2, 162, 0]
f35 = skipNorm $ segs [0, 1, 0, 49, 0.2, 200, 0.5, 100, 0.2, 162, 0]           -- softer 
f36 = segs [0, 1, 0, 79, 0.5, 60, 0.5, 20, 0.99, 120, 0.4, 140, 0.6, 92, 0]
f37 = segs [0, 1, 0, 149, 0.4, 200, 0.99, 50, 0.5, 50, 0.24, 62, 0]

-- exponential envelopes: post-normalized (2**10)
f51 = eexps [1024, 1]                                   -- plucked
f52 = exps  [1, 2.5, 1024, 100, 1]                      -- percussive
f53 = eexps [1, 1024, 1]                                -- 50/50
f54 = eexps [1, 250, 500, 750, 1024, 1]                 -- five steps
f55 = eexps [1, 1024, 1, 1, 1024, 1]                    -- twin peaks
f56 = exps  [1, 1, 100, 20, 12, 1024, 400, 1]           -- 1/5th delay
f57 = exps  [1, 1, 125, 20, 12, 1024, 375, 1]           -- 1/4th delay
f58 = exps  [1, 100, 1024, 2.5, 1]                      -- reverse f52
f59 = exps  [1, 1, 1024, 6, 900, 3, 1]                  -- moderate

amp = 0.5
  
waves1   = [(amp, 440, tab, f59) | tab <- [f1, f2, f3, f4, f5, f6, f7, f8, f9]]
waves2   = [(amp, 220, tab, f59) | tab <- [f10, f11, f41, f42, f43, f44, f45, f46]]

lineEnvs = [(amp, 330, f42, tab) | tab <- [f32, f33, f34, f35, f36, f37]]
expEnvs  = [(amp, 444, f42, tab) | tab <- fmap guardPoint [f51, f52, f53, f54, f55, f56, f57, f58, f59]]

notes = line $ fmap (\x -> line [4 *| temp x, rest 2]) $ concat [waves1, waves2, lineEnvs, expEnvs]

res = sco envOsc notes

main = writeCsd "tmp.csd" res
-- main = totem res


